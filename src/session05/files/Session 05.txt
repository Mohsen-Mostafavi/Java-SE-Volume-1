
Static Modifier
================

static != non-static

In Java:
-------------------------
-No static class (outer)
-No static constructor
-No static local variable

Static Field
=============
-instance field (non-static field)  vs. class field (static field)
-static field --> only one memory space for N object (0<=N) 

Object Orientation and static fields & methods 
----------------------------------------------
Warning!
- No new memory space for static field, when you create object!!! 
- static fields are not easily reclaim. (the classloader must be unload)

final + static field
=====================
static final fields of primitive types or type String initialized with compile time constants,
are inlined at all code points where such fields are referenced. 

Compile time constant must be:
-------------------------------
-declared final
-primitive or String
-initialized within declaration
-initialized with constant expression (not method call)

final static int f = 100; // direct initialization

if initialized directly, can be inline by compiler!

final static int f = 100; -- so --> (Test.f replaces with 100)

final static int f; 

Static initialization block
============================
static initialization block runs only one time at the class loading phase,
before object creation!

static {

} 

Static Method
==============

className.statiMethod(); // recommended

obj.staticMethod(); // also works

instance method (non-static method) vs. class method (static method)
---------------------------------------------------------------------

static method can be called using class name (object is not required!)

static method --> no "this" implicit argument

static context rules...

MainThread calls static main() method without object creation!

-You may overload a static method (in future sessions...)

-Static method cannot be overriden! (in future sessions...)

======================================================================

Object Life Cycle
===================
new LifeCycle().m1();

1: Initializing static fields...
   Running Static method sm()...
2: Running Static Initialization Block...
   Class Loaded into JVM, But No Object!
3: Initializing non-static fields...
   Running Static method m()...
4: Running Initialization Block...
   Object was created!
5: Running Constructor...
   (The version that user called)
6: Running method m1()...
7: Running Finalize...
   GC called finalize() and is going to reclaim the object from Heap

When to declare a method static? 
--------------------------------
1-No field (Stateless)
2-the method doesn't need the field or object(this) ( Integer.parseInt("10") )
3-accessing encapsulated static field without object
4-avoid the overhead of object creation

Utility Class (Like java.util.Arrays)
======================================
-No instance field
-(May have final static field)
-private constructor to ensur non-instantiability.
-public static void sort( int[] a ) 

Stateless vs. Statefull classes (Object oriented)
==================================================
    



