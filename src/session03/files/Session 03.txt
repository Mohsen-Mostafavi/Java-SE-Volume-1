
Q&A: How 100 objects run by the same method implementation?

what is 'this'? 
==============
'this' is a java keyword and an implicit argument passed to each (non-static) method having the address of the current object.

========================================================================

More Details about Java Methods
--------------------------------

Method Format
---------------
return_type method_name(parameters)

    void    m( int i ) 


Method Chaining / Cascading / Builder 
--------------------------------------

m1().m2().m3().m4();

number.add(10).add(20).add(30).print();

account.deposit(1500).withdraw(500).save();

query.select("branchName").from("branches").where("branchCode=284").print();

Response.ok().cookie(new NewCookie("SessionID", "5G79GDIFY09")).build();


Class Assignment #1: QueryBuilder
-----------------------------------
QueryBuilder query = new QueryBuilder();

query.select("branchName").from("branches")
     .where("branchCode=284").print();

// "SELECT branchName FROM branches WHERE branchCode=284"


Passing Objects with method calls (All versions of Java)
--------------------------------------------------------

method( new Adder() {{
           add(1);
           add(2);
           add(3);
       }} );


===================================================================

-Fields Default Initialization

-Fields Direct Initialization

Constructor
============

James Gosling (JPL 2.5.1):
"For purposes other than simple initialization, classes can have constructors.
Constructors are blocks of statements that can be used to initialize an object before the reference to the object is returned by new.
Constructors have the same name as the class they initialize. 
Like methods, they take zero or more arguments,
but constructors are not methods and thus have no return type."

class ClassName { public ClassName() { } }

ClassName obj = new ClassName();

Constructor will run after object creation in heap and before reference return!

We cannot call the constuctors after object creation!

Implicit Constructor / Default Constructor / ...

Default constructor is added only when NO other constructor is presented!

Constructors Overloading
-------------------------
public Student()  // no argument constructor

public Student(int i, double d, String s)

public Student(int i) 

this(); --> call the no argument constructor of this class
this(1);
this(1,2,3);

call to this() must be first statement in constructor body!

---------------------
'this' Usage in Java
---------------------

1) m(this);

2) this.field
   this.method();

3) this();
   this(1);
   this(1,2,3);

4) ClassName.this

CopyConstructor
---------------

public Student( Student another ) { // Copy Constructor

	this.i = another.i;
	this.d = another.d;
	this.s = another.s;

}

Usage #1: Student s1 = new Student( s2 );

Usage #2: m( s1 ); ---> m ( new Student( s1 ) );

==================================================================

Initialization Blocks (run before constructors!)
----------------------

Anonymous Class --> Initialization Block instead of Constructor!

new Adder() {{
           add(1);
           add(2);
           add(3);
       }} );

How to initialize final fields? 
--------------------------------
SEQ #1: Direct init XOR (otherwise will be overwritten)
SEQ #2: Init Block  XOR 
SEQ #3: Constructor XOR

Methods can not initialize final fields!

We cannot use Constructors in Anonymous Classes! So we should use init blocks instead.

==================================================================

package
--------

Why package?

-Namespace (duplicate name)
-Visibility / Scope (package-private)
-As Library (in compare to other languages)
-Structure of project / seperate sub-systems, layers, role
-nested: erp.accounting.view.web 
-package name is the path for the file in file system
 "erp.accounting.view.web.A"
 File System View of Java Package:
 CLASS_PATH/erp/accounting/view/web/A.class
-package name provides information about the origin of the class  

Full Qualified Name: java.util.Scanner (Unique)

package naming
----------------
ir.org.acm.session03.samples;

magfa.org
software
ecom
---> org.magfa.software.ecom

org.apache.common.????

File.java
----------
package ir.org.acm.session03;

class A { }
----------

public class HelloWorld --> Default Package

How to use classes in other packages?
--------------------------------------

1) use full qualified name:
----------------------------
ir.org.acm.erp.accounting.entity.BankAccount ba = new ir.org.acm.erp.accounting.entity.BankAccount();

2) use import
--------------
import ir.org.acm.erp.accounting.entity.BankAccount;

BankAccount ba = new BankAccount();

3) use import with wildcard
-----------------------------
import ir.org.acm.erp.accounting.entity.*;

BankAccount ba = new BankAccount();

"*" -> imports only the named package!

Imported By Default (Implicit)
-------------------------------
java.lang
         .String
         .System
         .Integer

(java.lang Provides classes that are fundamental to the design of the Java programming language.)

order
------
1-package
2-import
3-class

java.lang.String
???\jdk\jre\lib\rt.jar -> \java\lang\String.class

===============================================================================================

Modifier

final


Access Modifier / Visibility Modifier
--------------------------------------
- public *
- protected
- [      ] (package-private) --> for Classes
- private *




