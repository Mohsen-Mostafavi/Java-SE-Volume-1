
Mutator and Accessor Methods
=============================

Review of Access Modifier / Visibility Modifier
--------------------------------------
- public *
- protected
- [      ] (package-private) --> for Classes
- private *

Note: Encapsulation is not security protection!

Encapsulated fields:
---------------------
-prevent invalid state
-provide synchronized access
-Lazy Fetch,...
-Side effect or Event
-Read only
-Method Delegation (method forwarding)
...

=======================================================

What is Bean? Coffee Bean?! 

Class + Convention --> Bean

JavaBean Convention:
--------------------
JavaBeans components are Java classes that can be easily reused and composed together into applications.

Any Java class that follows certain design conventions is a JavaBeans component:
 
1- public no-argument constructor

2- Accessor --> Field_Type getField()       --> getter | isBoolean()
                       int getAge()
                   boolean isAlive()

3- Mutator  --> void setField(Field_Type t) --> setter 
                     setAge(int a)

========================================================================

Class Assignment: ReadOnly Class (Immutable)

Field ---> int value;

What about Reference field?!

If an Immutable object accessed by more than 2 threads at the same time, there is no possibility of Race Condition!

String and Wrapper Classes are Immutable!
------------------------------------------

Java Strings
=============

String is a class and reference type (String.class)

public final class String

	private final char value[];

Java String (= , +) and Overhead Issue

"ACM".length()

"ACM".equals(str)

How to Compare Strings?
------------------------
.equals() vs. ==

What is String interning / Pooling
-----------------------------------
Compile-Time & Run-Time

.intern()

=======================================================================

String vs. StringBuffer

Formula to increase StringBuffer Capacity
-------------------------------------------
int newCapacity = (value.length << 1) + 2;

if (newCapacity - minCapacity < 0) {
        newCapacity = minCapacity;
}

==============================================================

StringBuffer vs. StringBuilder
------------------------------

StringBuffer  : A thread-safe, mutable sequence of characters.

StringBuilder : A mutable sequence of characters. This class provides an API compatible
                with StringBuffer, but with no guarantee of synchronization.
                This class is designed for use as a drop-in replacement for
                in places where the string buffer was being
                used by a single thread

=========================================================

Wrapper Classes (Integer, Double, ...) 

The Integer class wraps a value of the primitive type int in an object. An object of type Integer contains a single field whose type is int. 

public final class Integer extends Number {
	private final int value;
}

Autoboxing / unboxing

In Wrapper Classes you have related methods!

All Wrapper Classes' values are implicitly final!

Use .equals method instead of "==" operator

Integer Cache (range [-128, 127] must be interned (JLS7 5.1.7))
--------------
Integer c1 = 0;
Integer c2 = 0;

if (c1 == c2) ===> true

high value may be configured by property
java.lang.Integer.IntegerCache.high







